version: 2.1

orbs:
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:8.0

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  terraform-init-then-plan:
    description: "Initializes and run plan from terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: plan
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform plan -out=plan.out
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
            - project/*

  terraform-apply:
    description: "Applies terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: apply
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform apply -auto-approve plan.out

  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_18.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless
      - run:
          name: Build lambda
          command: |
            cd ./HousingRegisterApi/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            cd ./HousingRegisterApi/
            sls deploy --stage <<parameters.stage>> --conceal

jobs:
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --check
  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: docker-compose build housing-register-api-test
      - run:
          name: Run tests
          command: docker-compose run housing-register-api-test
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT

  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING

  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  terraform-init-and-plan-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "development"

  terraform-apply-development:
    executor: docker-terraform
    steps:
      - terraform-apply:
          environment: "development"

  terraform-init-and-plan-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "staging"

  terraform-apply-staging:
    executor: docker-terraform
    steps:
      - terraform-apply:
          environment: "staging"

  terraform-init-and-plan-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "production"

  terraform-apply-production:
    executor: docker-terraform
    steps:
      - terraform-apply:
          environment: "production"

  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "development"

  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "staging"

  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "production"

workflows:
  check-and-deploy-development:
    jobs:
      - check-code-formatting:
          context: api-nuget-token-context
      - build-and-test:
          context: api-nuget-token-context
      - assume-role-development:
          context: api-assume-role-housing-development-context
          requires:
            - build-and-test
          filters:
            branches:
              only: development
      - terraform-init-and-plan-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: development
      #Enable this to check the plan before applying changes. Also please remember to change the required dependency below
      # - permit-development-terraform-release:
      #     type: approval
      #     requires:
      #       - terraform-init-and-plan-development
      #     filters:
      #       branches:
      #         only: development
      - terraform-apply-development:
          requires:
            - terraform-init-and-plan-development
          filters:
            branches:
              only: development
      - deploy-to-development:
          context:
            - api-nuget-token-context
            - "Serverless Framework"  
          requires:
            - terraform-apply-development
          filters:
            branches:
              only: development

  check-and-deploy-staging-and-production:
    jobs:
      - build-and-test:
          context: api-nuget-token-context
          filters:
            branches:
              only: master
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - terraform-init-and-plan-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master
      #Enable this to check the plan before applying changes. Also please remember to change the required dependency below
      #     - permit-staging-terraform-release:
      # type: approval
      # requires:
      #   - terraform-init-and-plan-staging
      # filters:
      #   branches:
      #     only: master
      - terraform-apply-staging:
          requires:
            - terraform-init-and-plan-staging
          filters:
            branches:
              only: master
      - deploy-to-staging:
          context:
            - api-nuget-token-context
            - "Serverless Framework"         
          requires:
            - terraform-apply-staging
          filters:
            branches:
              only: master
      - assume-role-production:
          context: api-assume-role-housing-production-context
          requires:
            - deploy-to-staging
          filters:
            branches:
              only: master
      - terraform-init-and-plan-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: master     
      - permit-production-terraform-release:
          type: approval
          requires:
            -  terraform-init-and-plan-production
          filters:
            branches:
              only: master
      - terraform-apply-production:
          requires:
            -  permit-production-terraform-release
          filters:
            branches:
              only: master
      - permit-production-release:
          type: approval
          requires:
            - deploy-to-staging
            - terraform-apply-production
          filters:
            branches:
              only: master
      - deploy-to-production:
          context:
            - api-nuget-token-context
            - "Serverless Framework"  
          requires:
            - permit-production-release
            - terraform-apply-production
          filters:
            branches:
              only: master
